%!PS-Adobe-2.0 EPSF-2.0
%%Title: report/VisitNoemailLCLs.eps
%%Creator: gnuplot 4.4 patchlevel 0
%%CreationDate: Mon Feb  7 17:09:25 2011
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 625 481
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color true def
/Blacktext false def
/Solid true def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -46 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (report/VisitNoemailLCLs.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 0)
  /Author (sbliven)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Mon Feb  7 17:09:25 2011)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 625 50 lineto 625 481 lineto 50 481 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (January 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
gsave % colour palette begin
/maxcolors 64 def
/HSV2RGB {  exch dup 0.0 eq {pop exch pop dup dup} % achromatic gray
  { /HSVs exch def /HSVv exch def 6.0 mul dup floor dup 3 1 roll sub
     /HSVf exch def /HSVi exch cvi def /HSVp HSVv 1.0 HSVs sub mul def
	 /HSVq HSVv 1.0 HSVs HSVf mul sub mul def 
	 /HSVt HSVv 1.0 HSVs 1.0 HSVf sub mul sub mul def
	 /HSVi HSVi 6 mod def 0 HSVi eq {HSVv HSVt HSVp}
	 {1 HSVi eq {HSVq HSVv HSVp}{2 HSVi eq {HSVp HSVv HSVt}
	 {3 HSVi eq {HSVp HSVq HSVv}{4 HSVi eq {HSVt HSVp HSVv}
	 {HSVv HSVp HSVq} ifelse} ifelse} ifelse} ifelse} ifelse
  } ifelse} def
/Constrain {
  dup 0 lt {0 exch pop}{dup 1 gt {1 exch pop} if} ifelse} def
/YIQ2RGB {
  3 copy -1.702 mul exch -1.105 mul add add Constrain 4 1 roll
  3 copy -0.647 mul exch -0.272 mul add add Constrain 5 1 roll
  0.621 mul exch -0.956 mul add add Constrain 3 1 roll } def
/CMY2RGB {  1 exch sub exch 1 exch sub 3 2 roll 1 exch sub 3 1 roll exch } def
/XYZ2RGB {  3 copy -0.9017 mul exch -0.1187 mul add exch 0.0585 mul exch add
  Constrain 4 1 roll 3 copy -0.0279 mul exch 1.999 mul add exch
  -0.9844 mul add Constrain 5 1 roll -0.2891 mul exch -0.5338 mul add
  exch 1.91 mul exch add Constrain 3 1 roll} def
/SelectSpace {ColorSpace (HSV) eq {HSV2RGB}{ColorSpace (XYZ) eq {
  XYZ2RGB}{ColorSpace (CMY) eq {CMY2RGB}{ColorSpace (YIQ) eq {YIQ2RGB}
  if} ifelse} ifelse} ifelse} def
/InterpolatedColor true def
/grayindex {/gidx 0 def
  {GrayA gidx get grayv ge {exit} if /gidx gidx 1 add def} loop} def
/dgdx {grayv GrayA gidx get sub GrayA gidx 1 sub get
  GrayA gidx get sub div} def 
/redvalue {RedA gidx get RedA gidx 1 sub get
  RedA gidx get sub dgdxval mul add} def
/greenvalue {GreenA gidx get GreenA gidx 1 sub get
  GreenA gidx get sub dgdxval mul add} def
/bluevalue {BlueA gidx get BlueA gidx 1 sub get
  BlueA gidx get sub dgdxval mul add} def
/interpolate {
  grayindex grayv GrayA gidx get sub abs 1e-5 le
    {RedA gidx get GreenA gidx get BlueA gidx get}
    {/dgdxval dgdx def redvalue greenvalue bluevalue} ifelse} def
/GrayA [0 .0159 .0317 .0476 .0635 .0794 .0952 .1111 .127 .1429 .1587 .1746 
  .1905 .2063 .2222 .2381 .254 .2698 .2857 .3016 .3175 .3333 .3492 .3651 
  .381 .3968 .4127 .4286 .4444 .4603 .4762 .4921 .5079 .5238 .5397 .5556 
  .5714 .5873 .6032 .619 .6349 .6508 .6667 .6825 .6984 .7143 .7302 .746 
  .7619 .7778 .7937 .8095 .8254 .8413 .8571 .873 .8889 .9048 .9206 .9365 
  .9524 .9683 .9841 1 ] def
/RedA [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .0238 .0873 .1508 
  .2143 .2778 .3413 .4048 .4683 .5317 .5952 .6587 .7222 .7857 .8492 .9127 
  .9762 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 .9444 .881 .8175 .754 .6905 .627 
  .5635 .5 ] def
/GreenA [0 0 0 0 0 0 0 0 .0079 .0714 .1349 .1984 .2619 .3254 .3889 .4524 
  .5159 .5794 .6429 .7063 .7698 .8333 .8968 .9603 1 1 1 1 1 1 1 1 1 1 1 1 1 
  1 1 1 .9603 .8968 .8333 .7698 .7063 .6429 .5794 .5159 .4524 .3889 .3254 
  .2619 .1984 .1349 .0714 .0079 0 0 0 0 0 0 0 0 ] def
/BlueA [.5 .5635 .627 .6905 .754 .8175 .881 .9444 1 1 1 1 1 1 1 1 1 1 1 1 1 
  1 1 1 .9762 .9127 .8492 .7857 .7222 .6587 .5952 .5317 .4683 .4048 .3413 
  .2778 .2143 .1508 .0873 .0238 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
  0 0 ] def
/pm3dround {maxcolors 0 gt {dup 1 ge
	{pop 1} {maxcolors mul floor maxcolors 1 sub div} ifelse} if} def
/pm3dGamma 1.0 1.5 Gamma mul div def
/ColorSpace (RGB) def
Color InterpolatedColor or { % COLOUR vs. GRAY map
  InterpolatedColor { %% Interpolation vs. RGB-Formula
    /g {stroke pm3dround /grayv exch def interpolate
        SelectSpace setrgbcolor} bind def
  }{
  /g {stroke pm3dround dup cF7 Constrain exch dup cF5 Constrain exch cF15 Constrain 
       SelectSpace setrgbcolor} bind def
  } ifelse
}{
  /g {stroke pm3dround pm3dGamma exp setgray} bind def
} ifelse
0.500 UL
LTb
1475 928 M
88 0 V
8833 0 R
-88 0 V
stroke
0.00 0.00 0.00 C 1391 928 M
[ [(Helvetica) 120.0 0.0 true true 0 (-3080)]
] -40.0 MRshow
0.500 UL
LTb
1475 1933 M
88 0 V
8833 0 R
-88 0 V
stroke
0.00 0.00 0.00 C 1391 1933 M
[ [(Helvetica) 120.0 0.0 true true 0 (-3075)]
] -40.0 MRshow
0.500 UL
LTb
1475 2938 M
88 0 V
8833 0 R
-88 0 V
stroke
0.00 0.00 0.00 C 1391 2938 M
[ [(Helvetica) 120.0 0.0 true true 0 (-3070)]
] -40.0 MRshow
0.500 UL
LTb
1475 3943 M
88 0 V
8833 0 R
-88 0 V
stroke
0.00 0.00 0.00 C 1391 3943 M
[ [(Helvetica) 120.0 0.0 true true 0 (-3065)]
] -40.0 MRshow
0.500 UL
LTb
1475 4947 M
88 0 V
8833 0 R
-88 0 V
stroke
0.00 0.00 0.00 C 1391 4947 M
[ [(Helvetica) 120.0 0.0 true true 0 (-3060)]
] -40.0 MRshow
0.500 UL
LTb
1475 5952 M
88 0 V
8833 0 R
-88 0 V
stroke
0.00 0.00 0.00 C 1391 5952 M
[ [(Helvetica) 120.0 0.0 true true 0 (-3055)]
] -40.0 MRshow
0.500 UL
LTb
1475 6957 M
88 0 V
8833 0 R
-88 0 V
stroke
0.00 0.00 0.00 C 1391 6957 M
[ [(Helvetica) 120.0 0.0 true true 0 (-3050)]
] -40.0 MRshow
0.500 UL
LTb
1475 7962 M
88 0 V
8833 0 R
-88 0 V
stroke
0.00 0.00 0.00 C 1391 7962 M
[ [(Helvetica) 120.0 0.0 true true 0 (-3045)]
] -40.0 MRshow
0.500 UL
LTb
1475 928 M
0 88 V
0 6946 R
0 -88 V
stroke
0.00 0.00 0.00 C 1475 788 M
[ [(Helvetica) 120.0 0.0 true true 0 (0)]
] -40.0 MCshow
0.500 UL
LTb
3259 928 M
0 88 V
0 6946 R
0 -88 V
stroke
0.00 0.00 0.00 C 3259 788 M
[ [(Helvetica) 120.0 0.0 true true 0 (50)]
] -40.0 MCshow
0.500 UL
LTb
5043 928 M
0 88 V
0 6946 R
0 -88 V
stroke
0.00 0.00 0.00 C 5043 788 M
[ [(Helvetica) 120.0 0.0 true true 0 (100)]
] -40.0 MCshow
0.500 UL
LTb
6828 928 M
0 88 V
0 6946 R
0 -88 V
stroke
0.00 0.00 0.00 C 6828 788 M
[ [(Helvetica) 120.0 0.0 true true 0 (150)]
] -40.0 MCshow
0.500 UL
LTb
8612 928 M
0 88 V
0 6946 R
0 -88 V
stroke
0.00 0.00 0.00 C 8612 788 M
[ [(Helvetica) 120.0 0.0 true true 0 (200)]
] -40.0 MCshow
0.500 UL
LTb
10396 928 M
0 88 V
0 6946 R
0 -88 V
stroke
0.00 0.00 0.00 C 10396 788 M
[ [(Helvetica) 120.0 0.0 true true 0 (250)]
] -40.0 MCshow
0.500 UL
LTb
0.500 UL
LTb
1475 7962 N
0 -7034 V
8921 0 V
0 7034 V
-8921 0 V
Z stroke
0.00 0.00 0.00 C 817 4445 M
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 120.0 0.0 true true 0 (LCL)]
] -40.0 MCshow
grestore
LTb
0.00 0.00 0.00 C 5935 578 M
[ [(Helvetica) 120.0 0.0 true true 0 (Epoch)]
] -40.0 MCshow
LTb
5935 8172 M
[ [(Helvetica) 120.0 0.0 true true 0 (VisitNoemailLCLs)]
] -40.0 MCshow
1.000 UP
0.500 UL
LTb
% Begin plot #1
1.000 UP
0.500 UL
LT0
0.00 0.00 1.00 C 1511 1078 M
35 1431 V
36 996 V
36 697 V
35 490 V
36 344 V
36 240 V
35 165 V
36 112 V
36 74 V
36 47 V
35 27 V
36 15 V
36 7 V
35 1 V
36 -1 V
36 -2 V
35 -2 V
36 0 V
36 2 V
35 4 V
36 6 V
36 9 V
35 12 V
36 14 V
36 16 V
35 19 V
36 20 V
36 22 V
36 24 V
35 25 V
36 27 V
36 27 V
35 29 V
36 29 V
36 29 V
35 30 V
36 31 V
36 30 V
35 31 V
36 31 V
36 30 V
35 31 V
36 30 V
36 30 V
35 29 V
36 29 V
36 29 V
36 28 V
35 28 V
36 27 V
36 27 V
35 26 V
36 25 V
36 25 V
35 24 V
36 24 V
36 23 V
35 22 V
36 22 V
36 21 V
35 20 V
36 20 V
36 19 V
35 18 V
36 18 V
36 17 V
36 16 V
35 16 V
36 15 V
36 15 V
35 14 V
36 14 V
36 12 V
35 13 V
36 11 V
36 12 V
35 10 V
36 10 V
36 10 V
35 9 V
36 9 V
36 8 V
35 7 V
36 7 V
36 7 V
36 6 V
35 6 V
36 5 V
36 5 V
35 4 V
36 4 V
36 4 V
35 3 V
36 3 V
36 3 V
35 2 V
36 2 V
36 1 V
35 1 V
36 1 V
36 0 V
35 0 V
36 0 V
36 0 V
stroke 5222 7093 M
36 -1 V
35 -1 V
36 -2 V
36 -1 V
35 -2 V
36 -2 V
36 -3 V
35 -2 V
36 -3 V
36 -3 V
35 -4 V
36 -3 V
36 -4 V
35 -4 V
36 -4 V
36 -5 V
35 -4 V
36 -5 V
36 -5 V
36 -5 V
35 -5 V
36 -6 V
36 -5 V
35 -6 V
36 -6 V
36 -6 V
35 -6 V
36 -7 V
36 -6 V
35 -7 V
36 -7 V
36 -7 V
35 -7 V
36 -7 V
36 -7 V
35 -8 V
36 -7 V
36 -8 V
35 -7 V
36 -8 V
36 -8 V
36 -8 V
35 -8 V
36 -8 V
36 -9 V
35 -8 V
36 -9 V
36 -8 V
35 -9 V
36 -8 V
36 -9 V
35 -9 V
36 -9 V
36 -9 V
35 -9 V
36 -9 V
36 -9 V
35 -9 V
36 -9 V
36 -10 V
36 -9 V
35 -9 V
36 -10 V
36 -9 V
35 -10 V
36 -10 V
36 -9 V
35 -10 V
36 -10 V
36 -9 V
35 -10 V
36 -10 V
36 -10 V
35 -10 V
36 -10 V
36 -10 V
35 -9 V
36 -10 V
36 -11 V
36 -10 V
35 -10 V
36 -10 V
36 -10 V
35 -10 V
36 -10 V
36 -10 V
35 -11 V
36 -10 V
36 -10 V
35 -10 V
36 -10 V
36 -11 V
35 -10 V
36 -10 V
36 -11 V
35 -10 V
36 -10 V
36 -11 V
36 -10 V
35 -10 V
36 -11 V
36 -10 V
35 -10 V
36 -11 V
stroke 8933 6282 M
36 -10 V
35 -11 V
36 -10 V
36 -10 V
35 -11 V
36 -10 V
36 -11 V
35 -10 V
36 -10 V
36 -11 V
35 -10 V
36 -11 V
36 -10 V
36 -10 V
35 -11 V
36 -10 V
36 -11 V
35 -10 V
36 -10 V
36 -11 V
35 -10 V
36 -10 V
36 -11 V
35 -10 V
36 -10 V
36 -11 V
35 -10 V
36 -10 V
36 -11 V
35 -10 V
36 -10 V
36 -11 V
36 -10 V
35 -10 V
36 -10 V
36 -11 V
35 -10 V
36 -10 V
36 -10 V
35 -11 V
36 -10 V
1511 1078 BoxF
1546 2509 BoxF
1582 3505 BoxF
1618 4202 BoxF
1653 4692 BoxF
1689 5036 BoxF
1725 5276 BoxF
1760 5441 BoxF
1796 5553 BoxF
1832 5627 BoxF
1868 5674 BoxF
1903 5701 BoxF
1939 5716 BoxF
1975 5723 BoxF
2010 5724 BoxF
2046 5723 BoxF
2082 5721 BoxF
2117 5719 BoxF
2153 5719 BoxF
2189 5721 BoxF
2224 5725 BoxF
2260 5731 BoxF
2296 5740 BoxF
2331 5752 BoxF
2367 5766 BoxF
2403 5782 BoxF
2438 5801 BoxF
2474 5821 BoxF
2510 5843 BoxF
2546 5867 BoxF
2581 5892 BoxF
2617 5919 BoxF
2653 5946 BoxF
2688 5975 BoxF
2724 6004 BoxF
2760 6033 BoxF
2795 6063 BoxF
2831 6094 BoxF
2867 6124 BoxF
2902 6155 BoxF
2938 6186 BoxF
2974 6216 BoxF
3009 6247 BoxF
3045 6277 BoxF
3081 6307 BoxF
3116 6336 BoxF
3152 6365 BoxF
3188 6394 BoxF
3224 6422 BoxF
3259 6450 BoxF
3295 6477 BoxF
3331 6504 BoxF
3366 6530 BoxF
3402 6555 BoxF
3438 6580 BoxF
3473 6604 BoxF
3509 6628 BoxF
3545 6651 BoxF
3580 6673 BoxF
3616 6695 BoxF
3652 6716 BoxF
3687 6736 BoxF
3723 6756 BoxF
3759 6775 BoxF
3794 6793 BoxF
3830 6811 BoxF
3866 6828 BoxF
3902 6844 BoxF
3937 6860 BoxF
3973 6875 BoxF
4009 6890 BoxF
4044 6904 BoxF
4080 6918 BoxF
4116 6930 BoxF
4151 6943 BoxF
4187 6954 BoxF
4223 6966 BoxF
4258 6976 BoxF
4294 6986 BoxF
4330 6996 BoxF
4365 7005 BoxF
4401 7014 BoxF
4437 7022 BoxF
4472 7029 BoxF
4508 7036 BoxF
4544 7043 BoxF
4580 7049 BoxF
4615 7055 BoxF
4651 7060 BoxF
4687 7065 BoxF
4722 7069 BoxF
4758 7073 BoxF
4794 7077 BoxF
4829 7080 BoxF
4865 7083 BoxF
4901 7086 BoxF
4936 7088 BoxF
4972 7090 BoxF
5008 7091 BoxF
5043 7092 BoxF
5079 7093 BoxF
5115 7093 BoxF
5150 7093 BoxF
5186 7093 BoxF
5222 7093 BoxF
5258 7092 BoxF
5293 7091 BoxF
5329 7089 BoxF
5365 7088 BoxF
5400 7086 BoxF
5436 7084 BoxF
5472 7081 BoxF
5507 7079 BoxF
5543 7076 BoxF
5579 7073 BoxF
5614 7069 BoxF
5650 7066 BoxF
5686 7062 BoxF
5721 7058 BoxF
5757 7054 BoxF
5793 7049 BoxF
5828 7045 BoxF
5864 7040 BoxF
5900 7035 BoxF
5936 7030 BoxF
5971 7025 BoxF
6007 7019 BoxF
6043 7014 BoxF
6078 7008 BoxF
6114 7002 BoxF
6150 6996 BoxF
6185 6990 BoxF
6221 6983 BoxF
6257 6977 BoxF
6292 6970 BoxF
6328 6963 BoxF
6364 6956 BoxF
6399 6949 BoxF
6435 6942 BoxF
6471 6935 BoxF
6506 6927 BoxF
6542 6920 BoxF
6578 6912 BoxF
6613 6905 BoxF
6649 6897 BoxF
6685 6889 BoxF
6721 6881 BoxF
6756 6873 BoxF
6792 6865 BoxF
6828 6856 BoxF
6863 6848 BoxF
6899 6839 BoxF
6935 6831 BoxF
6970 6822 BoxF
7006 6814 BoxF
7042 6805 BoxF
7077 6796 BoxF
7113 6787 BoxF
7149 6778 BoxF
7184 6769 BoxF
7220 6760 BoxF
7256 6751 BoxF
7291 6742 BoxF
7327 6733 BoxF
7363 6723 BoxF
7399 6714 BoxF
7434 6705 BoxF
7470 6695 BoxF
7506 6686 BoxF
7541 6676 BoxF
7577 6666 BoxF
7613 6657 BoxF
7648 6647 BoxF
7684 6637 BoxF
7720 6628 BoxF
7755 6618 BoxF
7791 6608 BoxF
7827 6598 BoxF
7862 6588 BoxF
7898 6578 BoxF
7934 6568 BoxF
7969 6559 BoxF
8005 6549 BoxF
8041 6538 BoxF
8077 6528 BoxF
8112 6518 BoxF
8148 6508 BoxF
8184 6498 BoxF
8219 6488 BoxF
8255 6478 BoxF
8291 6468 BoxF
8326 6457 BoxF
8362 6447 BoxF
8398 6437 BoxF
8433 6427 BoxF
8469 6417 BoxF
8505 6406 BoxF
8540 6396 BoxF
8576 6386 BoxF
8612 6375 BoxF
8647 6365 BoxF
8683 6355 BoxF
8719 6344 BoxF
8755 6334 BoxF
8790 6324 BoxF
8826 6313 BoxF
8862 6303 BoxF
8897 6293 BoxF
8933 6282 BoxF
8969 6272 BoxF
9004 6261 BoxF
9040 6251 BoxF
9076 6241 BoxF
9111 6230 BoxF
9147 6220 BoxF
9183 6209 BoxF
9218 6199 BoxF
9254 6189 BoxF
9290 6178 BoxF
9325 6168 BoxF
9361 6157 BoxF
9397 6147 BoxF
9433 6137 BoxF
9468 6126 BoxF
9504 6116 BoxF
9540 6105 BoxF
9575 6095 BoxF
9611 6085 BoxF
9647 6074 BoxF
9682 6064 BoxF
9718 6054 BoxF
9754 6043 BoxF
9789 6033 BoxF
9825 6023 BoxF
9861 6012 BoxF
9896 6002 BoxF
9932 5992 BoxF
9968 5981 BoxF
10003 5971 BoxF
10039 5961 BoxF
10075 5950 BoxF
10111 5940 BoxF
10146 5930 BoxF
10182 5920 BoxF
10218 5909 BoxF
10253 5899 BoxF
10289 5889 BoxF
10325 5879 BoxF
10360 5868 BoxF
10396 5858 BoxF
% End plot #1
1.000 UP
0.500 UL
LTb
grestore % colour palette end
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
