function [summedSSEResult]=CrossValidate(trainingData,fun,betas0,lambda)
%args:
%outputs:
%true posives, false positives, true negatives, false negatives
%
%input
%trainingData - NxD matrix where each of the N lines is a row and every 
%first column of the rows represent a label and each of the D-1 remaining
%columns are dimensions.
%betas0 - the betas to start with
%lambda - the learning rate

%k is number of folds
k=floor(trainingData/;
%Obtaining indices for
indices = crossvalind('Kfold', length(trainingData),k);

%For each of the k folds, use this as test set and train the model on
%the remaining k-1 sets

summedSSE=zeros(k,1);
for k=1:5
    %separate into training and test set
    testFold = trainingData(indices==k,:);
    trainingFold = trainingData(indices~=k,:);
    
    %Train model
    betas=fun(trainingFold,lambda);
    
    %run tests

    for i=1:length(testFold)
        %TODO 2: no prediction function defined.
        label=prediction([1,testFold(i,2:end)],betas);
        a=testFold(i,1);
        SSE=(label-a)^2;
        summedSSE(k)=summedSSE(k)+SSE;
    end
    summedSSEResult=summedSSEResult+summedSSE;
end
end